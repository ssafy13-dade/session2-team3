# -*- coding: utf-8 -*-
"""[DADE] FinanceDataToPostgreSQL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C8wQvf_aEHxbHUkk-hS_jLPHypHbQHL5

# [데이터] finance-datareader 설치
"""

pip install finance-datareader

"""# [DB] PostgreSQL"""

pip install psycopg2

import psycopg2

"""## US"""

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)
cur = conn.cursor()

drop_table_sql = '''
DROP TABLE IF EXISTS us_stocks_prices;
DROP TABLE IF EXISTS us_stocks_info CASCADE;
'''

cur.execute(drop_table_sql)
conn.commit()

cur.close()
conn.close()

"""### US 종목 Table"""

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)
cur = conn.cursor()

create_table_sql = '''
CREATE TABLE IF NOT EXISTS us_stocks_info (
    symbol      VARCHAR(20) PRIMARY KEY,     -- 종목 코드 (예: AAPL)
    name        TEXT        NOT NULL,        -- 종목명
    sector      TEXT,                        -- 섹터 (예: Technology)
    industry    TEXT,                        -- 산업군 (예: Semiconductors)
    market      VARCHAR(10) NOT NULL         -- 시장 (예: NASDAQ)
);
'''

cur.execute(create_table_sql)
conn.commit()

cur.close()
conn.close()

"""### US 개별 종목 Table"""

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)
cur = conn.cursor()

create_table_sql = '''
CREATE TABLE IF NOT EXISTS us_stocks_prices (
    symbol      VARCHAR(20) NOT NULL,        -- 종목 코드
    date        DATE        NOT NULL,        -- 날짜
    open        FLOAT,                       -- 시가
    high        FLOAT,                       -- 고가
    low         FLOAT,                       -- 저가
    close       FLOAT,                       -- 종가
    volume      FLOAT,                       -- 거래량
    adj_close   FLOAT,                       -- 수정 종가

    PRIMARY KEY (symbol, date),              -- 복합 기본 키
    FOREIGN KEY (symbol) REFERENCES us_stocks_info(symbol)  -- 종목 코드 외래 키 제약
);
'''

cur.execute(create_table_sql)
conn.commit()

cur.close()
conn.close()

"""## KOR"""

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)
cur = conn.cursor()

drop_table_sql = '''
DROP TABLE IF EXISTS kr_stocks_prices;
DROP TABLE IF EXISTS kr_stocks_info CASCADE;
'''

cur.execute(drop_table_sql)
conn.commit()

cur.close()
conn.close()

"""### KOR 종목 Table"""

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)
cur = conn.cursor()

create_table_sql = '''
CREATE TABLE IF NOT EXISTS kr_stocks_info (
    code          VARCHAR(20)     PRIMARY KEY,     -- 종목 코드
    isu_cd        VARCHAR(20),                     -- ISIN 코드
    name          TEXT            NOT NULL,        -- 종목명
    dept          VARCHAR(20),                     -- 부문 / 섹터
    close         INTEGER,                         -- 종가
    change_code   SMALLINT,                        -- 등락 코드 (예: 1:상승, 2:하락)
    changes       INTEGER,                         -- 등락 폭
    change_ratio  NUMERIC(6,2),                    -- 등락률 (%)
    open          INTEGER,                         -- 시가
    high          INTEGER,                         -- 고가
    low           INTEGER,                         -- 저가
    volume        BIGINT,                          -- 거래량
    amount        BIGINT,                          -- 거래 대금
    marcap        NUMERIC(20,0),                   -- 시가총액
    stocks        BIGINT,                          -- 상장 주식 수
    market_id     VARCHAR(10)     NOT NULL,        -- 시장 식별자 (예: STK)
    market        VARCHAR(10)     NOT NULL         -- 시장명 (예: KOSPI)
);
'''

cur.execute(create_table_sql)
conn.commit()

cur.close()
conn.close()

"""### KOR 개별 종목 Table"""

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)
cur = conn.cursor()

create_table_sql = '''
CREATE TABLE IF NOT EXISTS kr_stocks_prices (
    code       VARCHAR(20),                -- 종목 코드
    date       DATE         NOT NULL,      -- 거래일
    open       FLOAT,                      -- 시가
    high       FLOAT,                      -- 고가
    low        FLOAT,                      -- 저가
    close      FLOAT,                      -- 종가
    volume     FLOAT,                      -- 거래량
    change     FLOAT,                      -- 전일 대비 변화

    PRIMARY KEY (code, date),              -- 복합 기본 키
    FOREIGN KEY (code) REFERENCES kr_stocks_info(code)   -- 외래 키 제약 조건
);
'''

cur.execute(create_table_sql)
conn.commit()

cur.close()
conn.close()

"""# [데이터 수집 및 적재] ETL

## US

### 종목
"""

import pandas as pd
import FinanceDataReader as fdr
from sqlalchemy import create_engine
import os

def extract_market_data():
  sp500 = fdr.StockListing('S&P500')
  nasdaq = fdr.StockListing('NASDAQ')
  nyse = fdr.StockListing('NYSE')

  sp500['Market'] = 'S&P500'
  nasdaq['Market'] = 'nasdaq'
  nyse['Market'] = 'nyse'

  return pd.concat([sp500, nasdaq, nyse], ignore_index=True)

def transform(df):
  # 컬럼 통일
  df = df.rename(columns = {
      'Symbol': 'symbol',
      'Name': 'name',
      'Sector': 'sector',
      'Industry': 'industry',
      'Market': 'market'
  })
  df = df[['symbol', 'name', 'sector', 'industry', 'market']]

  df = df.drop_duplicates(subset='symbol')  # 심볼 기준 중복 제거
  df = df.dropna(subset=['symbol', 'name']) # 필수값 없는 행 제거
  return df

def load_to_postgres(df):
  # SQLAlchemy 연결
  engine = create_engine('postgresql://myuser:vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh@dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com/stockdb_mocv')
  df.to_sql('us_stocks_info', engine, if_exists='append', index=False)
  print("PostgreSQL 테이블 'us_stocks_info' 저장 완료")
  return

def save_to_csv(df, path='us_stocks_info.csv'):
    df.to_csv(path, index=False, encoding='utf-8')
    print(f"CSV 파일 저장 완료: {os.path.abspath(path)}")

def run_etl():
  raw_data = extract_market_data()
  clean_data = transform(raw_data)
  # load_to_postgres(clean_data)
  save_to_csv(clean_data)

if __name__ == '__main__':
  run_etl()

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)

query = "SELECT * FROM us_stocks_info;"
us_stocks_info = pd.read_sql(query, conn)
conn.close()

us_stocks_info

"""### 개별 종목"""

import pandas as pd
import FinanceDataReader as fdr
from sqlalchemy import create_engine
from tqdm import tqdm
import os
from datetime import datetime

# PostgreSQL 연결 정보
DB_URL = 'postgresql://myuser:vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh@dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com/stockdb_mocv'

# 1. 주가 데이터 수집 함수 (처음부터 오늘까지)
def extract_stock_prices(symbols, end=None):
    all_data = []

    if end is None:
        end = datetime.today().strftime('%Y-%m-%d')

    for symbol in tqdm(symbols, desc=f"데이터 수집 중"):
        try:
            df = fdr.DataReader(symbol, end=end)
            df = df.reset_index()
            df['symbol'] = symbol
            all_data.append(df)
            print(f" {symbol} 데이터 수집 완료")
        except Exception as e:
            print(f" {symbol} 데이터 수집 실패: {e}")

    if all_data:
        return pd.concat(all_data, ignore_index=True)
    else:
        return pd.DataFrame()

# 2. 컬럼 정리 및 클렌징
def transform_price_data(df):
    df = df.rename(columns={
        'index': 'date',
        'Open': 'open',
        'High': 'high',
        'Low': 'low',
        'Close': 'close',
        'Volume': 'volume',
        'Adj Close': 'adj_close'
    })
    df = df[['symbol', 'date', 'open', 'high', 'low', 'close', 'volume', 'adj_close']]
    df = df.dropna(subset=['symbol', 'date'])
    return df

# 3. PostgreSQL 저장
def load_prices_to_postgres(df):
    engine = create_engine(DB_URL)
    df.to_sql('us_stock_prices', engine, if_exists='replace', index=False)
    print("PostgreSQL 테이블 'us_stock_prices' 저장 완료")

# 4. CSV 백업
def save_prices_to_csv(df, path='us_stocks_prices.csv'):
    df.to_csv(path, index=False, encoding='utf-8')
    print(f"CSV 저장 완료: {os.path.abspath(path)}")

# 5. 전체 실행 함수
def run_stock_price_etl():
    symbols = us_stocks_info['symbol'].unique().tolist()
    raw_prices = extract_stock_prices(symbols)
    clean_prices = transform_price_data(raw_prices)
    # load_prices_to_postgres(clean_prices)
    save_prices_to_csv(clean_prices)

if __name__ == '__main__':
    run_stock_price_etl()

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)

query = "SELECT * FROM us_stocks_prices;"
us_stock_prices = pd.read_sql(query, conn)
conn.close()

us_stock_prices

"""## KOR

### 종목
"""

import pandas as pd
import FinanceDataReader as fdr
from sqlalchemy import create_engine
import os

def extract_market_data():
  kospi = fdr.StockListing('KOSPI')

  return kospi

def transform(df):
  # 컬럼 통일
  df = df.rename(columns = {
      'Code': 'code',
      'ISU_CD': 'isu_cd',
      'Name': 'name',
      'Market': 'market',
      'Dept': 'dept',
      'Close': 'close',
      'ChangeCode': 'change_code',
      'Changes': 'changes',
      'ChagesRatio': 'change_ratio',
      'Open': 'open',
      'High': 'high',
      'Low': 'low',
      'Volume': 'volume',
      'Amount': 'amount',
      'Marcap': 'marcap',
      'Stocks': 'stocks',
      'MarketId': 'market_id'
  })
  df = df[['code', 'isu_cd', 'name', 'dept', 'close', 'change_code', 'changes', 'change_ratio',
           'open', 'high', 'low', 'volume', 'amount', 'marcap', 'stocks', 'market_id', 'market']]

  df = df.drop_duplicates(subset='code')  # 코드 기준 중복 제거
  df = df.dropna(subset=['code', 'name']) # 필수값 없는 행 제거
  return df

def load_to_postgres(df):
  # SQLAlchemy 연결
  engine = create_engine('postgresql://myuser:vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh@dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com/stockdb_mocv')
  df.to_sql('kr_stocks_info', engine, if_exists='append', index=False)
  print("PostgreSQL 테이블 'kr_stocks_info' 저장 완료")
  return

def save_to_csv(df, path='kr_stocks_info.csv'):
    df.to_csv(path, index=False, encoding='utf-8')
    print(f"CSV 파일 저장 완료: {os.path.abspath(path)}")

def run_etl():
  raw_data = extract_market_data()
  clean_data = transform(raw_data)
  # load_to_postgres(clean_data)
  save_to_csv(clean_data)

if __name__ == '__main__':
  run_etl()

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)

query = "SELECT * FROM kr_stocks_info;"
kr_stocks_info = pd.read_sql(query, conn)
conn.close()

kr_stocks_info

"""### 개별 종목"""

import pandas as pd
import FinanceDataReader as fdr
from sqlalchemy import create_engine
from tqdm import tqdm
import os
from datetime import datetime

# PostgreSQL 연결 정보
DB_URL = 'postgresql://myuser:vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh@dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com/stockdb_mocv'

# 1. 주가 데이터 수집 함수 (처음부터 오늘까지)
def extract_stock_prices(codes, end=None):
    all_data = []

    if end is None:
        end = datetime.today().strftime('%Y-%m-%d')

    for code in tqdm(codes, desc=f"데이터 수집 중"):
        try:
            df = fdr.DataReader(code, end=end)
            df = df.reset_index()
            df['code'] = code
            all_data.append(df)
            print(f" {code} 데이터 수집 완료")
        except Exception as e:
            print(f" {code} 데이터 수집 실패: {e}")

    if all_data:
        return pd.concat(all_data, ignore_index=True)
    else:
        return pd.DataFrame()

# 2. 컬럼 정리 및 클렌징
def transform_price_data(df):
    df = df.rename(columns={
        'Date': 'date',
        'Open': 'open',
        'High': 'high',
        'Low': 'low',
        'Close': 'close',
        'Volume': 'volume',
        'Change': 'change'
    })
    df = df[['code', 'date', 'open', 'high', 'low', 'close', 'volume', 'change']]
    df = df.dropna(subset=['code', 'date'])
    return df

# 3. PostgreSQL 저장
def load_prices_to_postgres(df):
    engine = create_engine(DB_URL)
    df.to_sql('kr_stocks_prices', engine, if_exists='append', index=False)
    print("PostgreSQL 테이블 'kr_stocks_prices' 저장 완료")

# 4. CSV 백업
def save_prices_to_csv(df, path='kr_stocks_prices.csv'):
    df.to_csv(path, index=False, encoding='utf-8')
    print(f"CSV 저장 완료: {os.path.abspath(path)}")

# 5. 전체 실행 함수
def run_stock_price_etl():
    codes = kr_stocks_info['code'].unique().tolist()
    raw_prices = extract_stock_prices(codes)
    clean_prices = transform_price_data(raw_prices)
    # load_prices_to_postgres(clean_prices)
    save_prices_to_csv(clean_prices)

if __name__ == '__main__':
    run_stock_price_etl()

conn = psycopg2.connect(
    dbname='stockdb_mocv',
    user='myuser',
    password='vTsxYAIzQkWzDu7Mc4cdadE27LpIXZqh',
    host='dpg-cvqc7pbe5dus73f6s2og-a.oregon-postgres.render.com',
    port=5432
)

query = "SELECT * FROM kr_stocks_prices;"
kr_stock_prices = pd.read_sql(query, conn)
conn.close()

kr_stock_prices